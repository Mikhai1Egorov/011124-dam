# Продолжение работы с матрицами. Многомерные массивы и broadcasting
import numpy as np

# -----------------------------
# 1) ЕДИНИЧНАЯ МАТРИЦА И ОПЕРАЦИИ НАД НЕЙ
# -----------------------------

# np.eye(n): создаёт единичную квадратную матрицу n x n
I = np.eye(4)
print("Единичная матрица I:\n", I)

# Проверка: умножение матрицы на единичную
a = np.arange(16).reshape(4, 4)
print("Матрица a:\n", a)
print("a @ I:\n", a @ I)  # Умножение на единичную не изменяет матрицу

# -----------------------------
# fromfunction(): создание массива по функции от индексов
# -----------------------------

# np.fromfunction(func, shape): применяет func(i, j) к каждой паре индексов
def f(i, j):
    return 10 * i + j

array_from_func = np.fromfunction(f, (3, 4), dtype=int)
print("Массив из функции:\n", array_from_func)

# -----------------------------
# 2) ОБЪЕДИНЕНИЕ И РАЗДЕЛЕНИЕ МАССИВОВ
# -----------------------------

a = np.array([1, 3, 2])
b = np.array([4, 5, 6])

# np.hstack: объединение по горизонтали (вдоль второго измерения)
a = np.hstack((a, b))
print("Объединение по горизонтали:\n", a)

# np.hsplit: разбиение массива по индексам
parts = np.hsplit(a, [3, 6])
print("Результат hsplit:\n", parts)

# Пример с двумерными матрицами:
a = np.array([[0, 1], [2, 3]])
b = np.array([[4, 5, 6], [7, 8, 9]])
c = np.array([[4, 5], [6, 7], [8, 9]])

# np.hstack: объединение по горизонтали (по столбцам)
print("np.hstack((a, b)):\n", np.hstack((a, b)))

# np.vstack: объединение по вертикали (по строкам)
print("np.vstack((a, c)):\n", np.vstack((a, c)))

# -----------------------------
# 3) АГРЕГАЦИИ (sum, max, min, mean)
# -----------------------------

print("Матрица b:\n", b)
print("Сумма всех элементов:", b.sum())               # сумма всех элементов
print("Сумма по столбцам (axis=0):", b.sum(axis=0))   # сумма по каждому столбцу
print("Сумма по строкам (axis=1):", b.sum(axis=1))    # сумма по каждой строке

print("Максимум всего массива:", b.max())             # максимальное значение
print("Максимум по столбцам:", b.max(axis=0))
print("Минимум по строкам:", b.min(axis=1))

# np.trace(): возвращает сумму диагональных элементов (след матрицы)
print("След матрицы:", np.trace(b))

# -----------------------------
# 4) ТЕНЗОРЫ (МНОГОМЕРНЫЕ МАССИВЫ)
# -----------------------------

X = np.arange(24).reshape(2, 3, 4)  # Тензор 2x3x4
print("Тензор X:\n", X)

# Сумма по axis=0 (по слоям)
print("Сумма по оси 0:\n", X.sum(axis=0))

# Сумма по двум осям: axis=(1,2) — суммирование каждого 2D-блока
print("Сумма по осям 1 и 2:\n", X.sum(axis=(1, 2)))

# -----------------------------
# 5) BROADCASTING
# -----------------------------

# Пример поэлементного умножения одинаковых массивов
a = np.array([1, 2, 3])
b = np.array([2, 2, 2])
print("Поэлементное умножение:", a * b)

# То же, что a * 2
print("a * 2:", a * 2)

# Умножение на массив длины 1 (broadcasting)
print("a * [2]:", a * [2])

# Пример broadcasting с 2D массивом и 1D
a = np.array([
    [0, 0, 0],
    [10, 10, 10],
    [20, 20, 20],
    [30, 30, 30]
])
b = np.array([0, 1, 2])
print("Broadcasting:\n", a + b)

# -----------------------------
# 6) УПРАЖНЕНИЕ НА BROADCASTING
# -----------------------------

a = np.ones((4, 1, 3))
b = np.ones((12, 1))

# broadcasting: (4, 1, 3) * (12, 1) -> (4, 12, 3)
print("Broadcasted shape:", (a * b).shape)

# -----------------------------
# 7) ДОБАВЛЕНИЕ РАЗМЕРНОСТЕЙ
# -----------------------------

a = np.array([1,2,3,4,5,6,7,8,9,10])

# np.newaxis: добавление осей
b = a[np.newaxis, :]         # (1, 10)
c = a[np.newaxis, :, np.newaxis]  # (1, 10, 1)

print("Форма b:", b.shape)
print("Форма c:", c.shape)

# -----------------------------
# 8) ЗАДАЧИ
# -----------------------------

# Задача 1: деление с broadcasting
a = np.array([[0, 0, 0],
              [10, 10, 10],
              [20, 20, 20],
              [30, 30, 30]])
b = np.array([0, 1, 2])
result = a / (b + 1)
print("Результат деления:\n", result)

# Задача 2:
# Матрица 6x4 от 10 до 33
matrix = np.arange(10, 34).reshape(6, 4)
# Вектор 4 элемента от 15 до 18
vec = np.arange(15, 19)
# Поэлементное деление
div = matrix / vec
# След
print("След результата:", np.trace(div))

# Доп. задание: сумма по axis=0, среднее по axis=1
mat = np.arange(1, 25).reshape(3, 8)
print("Сумма по axis=0:\n", mat.sum(axis=0))
print("Среднее по axis=1:\n", mat.mean(axis=1))

# -----------------------------
# 9) ВОПРОСЫ ДЛЯ ЗАКРЕПЛЕНИЯ
# -----------------------------

# ❓ С помощью каких функций можно объединять массивы по горизонтали и вертикали?
# ➡️ np.hstack() и np.vstack()

# ❓ Что такое ось (axis)?
# ➡️ axis=0 — направление вдоль строк (столбцы), axis=1 — вдоль столбцов (строки)

# ❓ Как работает broadcasting?
# ➡️ NumPy автоматически расширяет массив меньшей размерности до формы большего
# по правилам: сравнение размерностей справа налево, размеры должны быть равны или равны 1