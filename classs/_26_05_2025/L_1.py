import numpy as np

# üìå –û–î–ù–û–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í
one_d_array = np.array([1, 2, 3])
print("–û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤:", one_d_array)

# üìå –î–í–£–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í
two_d_array = np.array([[1, 2, 3], [4, 5, 6]])
print("–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤:\n", two_d_array)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è
list_2d = [[1, 2], [3, 4]]
two_d_array = np.array(list_2d)
print("–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ list_2d:\n", two_d_array)

# üìå –í–ï–ö–¢–û–†-–°–¢–û–õ–ë–ï–¶
col = np.array([[10], [20]])
print("–í–µ–∫—Ç–æ—Ä-—Å—Ç–æ–ª–±–µ—Ü:\n", col)

# üìå –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ú–ê–°–°–ò–í–û–í

# –ë–∞–∑–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è *_like —Ñ—É–Ω–∫—Ü–∏–π
base_array = np.array([[1, 2, 3], [4, 5, 6]])
print("\n–ë–∞–∑–æ–≤—ã–π –º–∞—Å—Å–∏–≤:\n", base_array)

# empty_like ‚Äî –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å —Ç–æ–π –∂–µ —Ñ–æ—Ä–º–æ–π (–∑–Ω–∞—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã–µ)
empty_arr = np.empty_like(base_array)
print("\nempty_like:\n", empty_arr)

# ones_like ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 1 —Å —Ç–æ–π –∂–µ —Ñ–æ—Ä–º–æ–π
ones_arr = np.ones_like(base_array)
print("\nones_like:\n", ones_arr)

# zeros_like ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 0 —Å —Ç–æ–π –∂–µ —Ñ–æ—Ä–º–æ–π
zeros_arr = np.zeros_like(base_array)
print("\nzeros_like:\n", zeros_arr)

# full_like ‚Äî –º–∞—Å—Å–∏–≤, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–Ω–∞—á–µ–Ω–∏–µ–º
full_arr = np.full_like(base_array, 99)
print("\nfull_like (–∑–Ω–∞—á–µ–Ω–∏–µ 99):\n", full_arr)

# empty ‚Äî –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
empty_direct = np.empty((2, 3))
print("\nempty (2x3):\n", empty_direct)

# ones ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 1 –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
ones_direct = np.ones((2, 3))
print("\nones (2x3):\n", ones_direct)

# zeros ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 0 –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
zeros_direct = np.zeros((2, 3))
print("\nzeros (2x3):\n", zeros_direct)

# full ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
full_direct = np.full((2, 3), 7)
print("\nfull (2x3, –∑–Ω–∞—á–µ–Ω–∏–µ 7):\n", full_direct)

# üìå arange ‚Äî –º–∞—Å—Å–∏–≤ —Å —à–∞–≥–æ–º
a = np.arange(0, 9, 2)
print("\narange –æ—Ç 0 –¥–æ 9 —Å —à–∞–≥–æ–º 2:", a)

b = np.arange(0., 8, 2)
print("arange —Å float:", b)

# üìå linspace ‚Äî —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
lin = np.linspace(10, 20, 21)
print("\nlinspace –æ—Ç 10 –¥–æ 20 (21 —á–∏—Å–ª–æ):\n", lin)

# üìå –¢–†–ï–•–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í
three_d_array = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
print("\n3D –º–∞—Å—Å–∏–≤:\n", three_d_array)
print("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:", three_d_array.ndim)
print("–§–æ—Ä–º–∞:", three_d_array.shape)
print("–î–ª–∏–Ω–∞ (len):", len(three_d_array))
print("–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", three_d_array.size)

# üìå –ó–ê–î–ê–ù–ò–ï: –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤?
array = np.array([[1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9],
                  [10, 11, 12]])
print("\n–ú–∞—Ç—Ä–∏—Ü–∞:\n", array)
print("–§–æ—Ä–º–∞:", array.shape)  # (4, 3)
print("len(array):", len(array))  # 4 —Å—Ç—Ä–æ–∫–∏

# üìå –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤ NumPy
two_d_array = np.array([[1, 2, 3], [4, 5, 6]])
print("\nint –º–∞—Å—Å–∏–≤:\n", two_d_array)

two_d_array = np.array([[1, 2, 3.0], [4, 5, 6]])
print("float –º–∞—Å—Å–∏–≤:\n", two_d_array)

two_d_array = np.array([[1, 2, 3], ["A", "B", "C"]])
print("—Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞ ‚Üí —Å—Ç—Ä–æ–∫–∏:\n", two_d_array)

two_d_array = np.array([[1, 2, 3], ["A", "B", "C"*28]])
print("–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ dtype:\n", two_d_array)

# üìå –†–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö
print("\nitemsize int:", np.array([1, 2, 3]).itemsize)
print("itemsize str:", np.array([[1, 2, 3], ["A", "B", "C"]]).itemsize)

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–µ–∑–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º dtype
a = np.array([[1, 2, 3], ["A", "B", "C"]])
a[0][0] = "a"*10+"b"*10
print("–æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ:", a)

# üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏
list_int_str = [[1, 2, 3], ["A", "B", "C"]]
print("\n–°–ø–∏—Å–æ–∫ int/str:", list_int_str)

list_int_float = [[1, 2, 3.0], [4, 5, 6]]
print("–°–ø–∏—Å–æ–∫ int/float:", list_int_float)

two_d_array = np.array([[1, 2, 3], [4, 5, 6]])
print("to list:", two_d_array.tolist())

# üìå –ó–∞–¥–∞–Ω–∏–µ: –º–∞—Å—Å–∏–≤ —Å —Ç–∏–ø–æ–º float64
float_array = np.array([1, 2, 3], dtype=np.float64)
print("\nfloat64 –º–∞—Å—Å–∏–≤:", float_array)
print("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", float_array.dtype)

# üìå astype ‚Äî —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
int_array = np.array([1, 2, 3], dtype=np.int8)
print("astype ‚Üí float:", int_array.astype(np.float32))

# üìå –ü—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
arr = np.array([1, 2, 3, 4, 5])
print("\narr[1] + arr[3] = ", arr[1] + arr[3])  # 6

arr = np.array([1.0, 2, 3])
print("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ float –∏ int:", arr.dtype)

arr = np.arange(5, 15, 2)
print("arange(5, 15, 2):", arr)

# üìå –ó–ê–î–ê–ù–ò–ï: —Å–ª—É—á–∞–π–Ω—ã–π –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
rand_arr = np.random.randint(0, 100, size=5)
print("\n–°–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤:", rand_arr)
print("–¢–∏–ø:", type(rand_arr))
print("–†–∞–∑–º–µ—Ä:", rand_arr.shape)

# üìå –ó–ê–î–ê–ù–ò–ï: –º–∞—Å—Å–∏–≤ 3x4 –∏–∑ 1
ones_3x4 = np.ones((3, 4))
print("–ú–∞—Å—Å–∏–≤ 3x4 –∏–∑ 1:", ones_3x4)

# üìå –ó–ê–î–ê–ù–ò–ï: arange –∏ linspace
ar = np.arange(0, 11, 2)
ls = np.linspace(0, 10, 6)
print("arange:", ar)
print("linspace:", ls)
print("–°–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è?", np.allclose(ar, ls))

np.array([1, 2, 3])            # 1D –º–∞—Å—Å–∏–≤
np.array([[1, 2], [3, 4]])     # 2D –º–∞—Å—Å–∏–≤
np.zeros((2, 3))               # –º–∞—Å—Å–∏–≤ –∏–∑ 0
np.ones((3, 1))                # –º–∞—Å—Å–∏–≤ –∏–∑ 1
np.full((2, 2), 7)             # –º–∞—Å—Å–∏–≤ –∏–∑ 7
np.eye(3)                      # –µ–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
np.arange(0, 10, 2)            # [0 2 4 6 8]
np.linspace(0, 1, 5)           # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –æ—Ç 0 –¥–æ 1
np.random.rand(2, 2)           # —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
np.empty((2, 2))               # –ø—É—Å—Ç–æ–π (–º—É—Å–æ—Ä)

a.shape          # —Ñ–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞
a.ndim           # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
a.dtype          # —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
a.size           # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
a.itemsize       # —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–≤ –±–∞–π—Ç–∞—Ö)
a.nbytes         # –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (–≤ –±–∞–π—Ç–∞—Ö)

a[0]             # —ç–ª–µ–º–µ–Ω—Ç
a[1:3]           # —Å—Ä–µ–∑
a[:, 0]          # –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
a[1, 2]          # —Å—Ç—Ä–æ–∫–∞ 2, —Å—Ç–æ–ª–±–µ—Ü 3
a[-1]            # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

a.reshape((2, 3))     # –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
a.ravel()             # –≤ 1D
a.T                   # —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
a.flatten()           # –∫–æ–ø–∏—è –≤ 1D

a + b                 # –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ
a - b                 # –≤—ã—á–∏—Ç–∞–Ω–∏–µ
a * b                 # —É–º–Ω–æ–∂–µ–Ω–∏–µ
a / b                 # –¥–µ–ª–µ–Ω–∏–µ
a ** 2                # –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
np.add(a, b)          # —Ç–æ –∂–µ —Å–∞–º–æ–µ
np.dot(a, b)          # —Å–∫–∞–ª—è—Ä–Ω–æ–µ –∏–ª–∏ –º–∞—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
np.exp(a)             # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞
np.sqrt(a)            # –∫–æ—Ä–µ–Ω—å
np.log(a)             # –ª–æ–≥–∞—Ä–∏—Ñ–º
