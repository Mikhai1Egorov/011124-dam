# üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ NumPy

import numpy as np

two = np.array(["Hello"])

# üìå –ë–∞–∑–æ–≤—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏

two_d_array = np.array([[1, 2, 3], [4, 5, 6]])
print("–°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π:\n", two_d_array + two_d_array)
print("–ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è:\n", two_d_array * two_d_array)
print("–£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–æ:\n", two_d_array * 5)
print("–ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞:\n", two_d_array + 10)

# üìå Broadcasting (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π)
one_d_array = np.array([10, 20, 30])
print("Broadcasting (–æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ + –¥–≤—É–º–µ—Ä–Ω—ã–π):\n", one_d_array + two_d_array)

col = np.array([[10], [20]])
print("Broadcasting (–≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–ª–±–µ—Ü + –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤):\n", col + two_d_array)

# üìå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
col = np.array([1, 2])
row = np.array([3, 4, 5])
print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤:\n", np.concatenate([col, row]))

# üìå –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –∏ NaN
a = np.array([0, 2, 1])
b = np.array([3, 4, 5])
print("–í—ã—á–∏—Ç–∞–Ω–∏–µ:", a - b)
print("–î–µ–ª–µ–Ω–∏–µ:", a / b)
print("–°—Ç–µ–ø–µ–Ω—å:", a ** b)
print("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å (–≤–æ–∑–Ω–∏–∫–∞–µ—Ç inf):", b / a)
print("0.0 / 0.0 -> nan:", np.array([0.0]) / 0.0)
print("inf / inf -> nan:", np.array([np.inf]) / np.inf)

# üìå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (ufunc), —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ª–æ–≥–∏–∫–∞
print("–°–∏–Ω—É—Å –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ:", np.sin(a))
print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ (a > b):", a > b)
print("–•–æ—Ç—è –±—ã –æ–¥–Ω–æ True:", np.any(a >= 2))
print("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã True:", np.all(a >= 2))

# üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã
d = np.array([1, 5, 6])
print("–°—É–º–º–∞:", d.sum(), "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:", d.prod(), "–ú–∞–∫—Å–∏–º—É–º:", d.max(), "–ú–∏–Ω–∏–º—É–º:", d.min())
print("–°—Ä–µ–¥–Ω–µ–µ:", d.mean(), "–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", d.std())

# üìå –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
print("–ö–æ—Ä–µ–Ω—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ b:", np.sqrt(b))
print("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ b:", np.exp(b))
print("–õ–æ–≥–∞—Ä–∏—Ñ–º b:", np.log(b))
print("–°–∏–Ω—É—Å b:", np.sin(b))
print("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã e –∏ pi:", np.e, np.pi)
print("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞ b:", b.cumsum())

# ‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –∫–æ—Å–∏–Ω—É—Å—ã
x = np.linspace(-2 * np.pi, 2 * np.pi, 20)
print("–ö–≤–∞–¥—Ä–∞—Ç—ã –∫–æ—Å–∏–Ω—É—Å–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 1:", np.all(np.cos(x)**2 <= 1))

import numpy as np
import time

# ‚úÖ –í–æ–ø—Ä–æ—Å: –ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ NumPy –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?
# –û—Ç–≤–µ—Ç: NumPy –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–π —Ç–∏–ø, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –±–ª–æ–∫ –ø–∞–º—è—Ç–∏),
# —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, SIMD) –∏ —ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å.

a = np.arange(1_000_000)
b = np.arange(1_000_000)

start = time.time()
c = a + b
end = time.time()

print("–°–ª–æ–∂–µ–Ω–∏–µ NumPy:", end - start, "—Å–µ–∫—É–Ω–¥")  # –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!

# ‚úÖ –í–æ–ø—Ä–æ—Å: –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω—É–ª–∏?
# –û—Ç–≤–µ—Ç: –ë—É–¥–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è `inf`, `-inf`, `nan` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏.

a = np.array([1, 2, 0, -4])
b = np.array([1, 0, 0, 2])

result = a / b
print("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è:", result)  # [ 1. inf nan -2.]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –∏ NaN
print("–Ø–≤–ª—è–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é:", np.isinf(result))
print("–Ø–≤–ª—è–µ—Ç—Å—è NaN:", np.isnan(result))

# ‚úÖ –í–æ–ø—Ä–æ—Å: –ß—Ç–æ —Ç–∞–∫–æ–µ np.nan, np.inf –∏ –∫–∞–∫ —Å –Ω–∏–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å?
# –û—Ç–≤–µ—Ç: `np.nan` ‚Äî "–Ω–µ —á–∏—Å–ª–æ" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0/0). `np.inf` ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å.
# –≠—Ç–æ float-–∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ `np.isnan`, `np.isinf`.

arr = np.array([1, np.nan, 3, np.inf, -np.inf])

print("nan:", np.isnan(arr))         # [False  True False False False]
print("inf:", np.isinf(arr))         # [False False False  True  True]
print("finite:", np.isfinite(arr))   # [ True False  True False False]

# ‚úÖ –í–æ–ø—Ä–æ—Å: –ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ –æ—Ç –º–∞—Å—Å–∏–≤–æ–≤ –ø—Ä–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ?
# –û—Ç–≤–µ—Ç: –°–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É: `list * 2` —É–¥–≤–∞–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫,
# –∞ `array * 2` ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç. –ú–∞—Å—Å–∏–≤—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.

lst = [1, 2, 3]
print("–°–ø–∏—Å–æ–∫ * 2:", lst * 2)  # [1, 2, 3, 1, 2, 3]

arr = np.array([1, 2, 3])
print("–ú–∞—Å—Å–∏–≤ * 2:", arr * 2)  # [2 4 6]

# ‚úÖ –í–æ–ø—Ä–æ—Å: –ß—Ç–æ —Ç–∞–∫–æ–µ broadcasting?
# –û—Ç–≤–µ—Ç: Broadcasting ‚Äî —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –º–∞—Å—Å–∏–≤–∞,
# —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –ø–æ —Ñ–æ—Ä–º–µ –º–∞—Å—Å–∏–≤–∞–º–∏.

a = np.array([1, 2, 3])
b = 10
print("Broadcast scalar:", a + b)  # [11 12 13] ‚Äî 10 ¬´—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è¬ª –Ω–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç

m = np.array([[1], [2], [3]])
n = np.array([10, 20, 30])
print("Broadcast row + column:\n", m + n)
# [[11 21 31]
#  [12 22 32]
#  [13 23 33]]